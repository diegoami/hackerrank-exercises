#!/usr/bin/python


inputarray = [
"3 9",
"5 1",
"7 20",
"%%%%%%%%%%%%%%%%%%%%",
"%--------------%---%",
"%-%%-%%-%%-%%-%%-%-%",
"%--------P-------%-%",
"%%%%%%%%%%%%%%%%%%-%",
"%.-----------------%",
"%%%%%%%%%%%%%%%%%%%%"
]

inputarray2 = [
"25 13",
"3 1",
"27 28",
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
"%------------%%------------%",
"%-%%%%-%%%%%-%%-%%%%%-%%%%-%",
"%.%%%%-%%%%%-%%-%%%%%-%%%%-%",
"%-%%%%-%%%%%-%%-%%%%%-%%%%-%",
"%--------------------------%",
"%-%%%%-%%-%%%%%%%%-%%-%%%%-%",
"%-%%%%-%%-%%%%%%%%-%%-%%%%-%",
"%------%%----%%----%%------%",
"%%%%%%-%%%%%-%%-%%%%%-%%%%%%",
"%%%%%%-%%%%%-%%-%%%%%-%%%%%%",
"%%%%%%-%------------%-%%%%%%",
"%%%%%%-%-%%%%--%%%%-%-%%%%%%",
"%--------%--------%--------%",
"%%%%%%-%-%%%%%%%%%%-%-%%%%%%",
"%%%%%%-%------------%-%%%%%%",
"%%%%%%-%-%%%%%%%%%%-%-%%%%%%",
"%------------%%------------%",
"%-%%%%-%%%%%-%%-%%%%%-%%%%-%",
"%-%%%%-%%%%%-%%-%%%%%-%%%%-%",
"%---%%----------------%%---%",
"%%%-%%-%%-%%%%%%%%-%%-%%-%%%",
"%%%-%%-%%-%%%%%%%%-%%-%%-%%%",
"%------%%----%%----%%------%",
"%-%%%%%%%%%%-%%-%%%%%%%%%%-%",
"%------------P-------------%",
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
]


inputarray3 = [
"11 9",
"2 15",
"13 20",
"%%%%%%%%%%%%%%%%%%%%",
"%----%--------%----%",
"%-%%-%-%%--%%-%.%%-%",
"%-%-----%--%-----%-%",
"%-%-%%-%%--%%-%%-%-%",
"%-----------%-%----%",
"%-%----%%%%%%-%--%-%",
"%-%----%----%-%--%-%",
"%-%----%-%%%%-%--%-%",
"%-%-----------%--%-%",
"%-%%-%-%%%%%%-%-%%-%",
"%----%---P----%----%",
"%%%%%%%%%%%%%%%%%%%%"

]


inputarray4 = [
"35 35",
"35 1",
"37 37",
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
"%-------%-%-%-----------%---%-----%-%",
"%-%%%%%%%-%-%%%-%-%%%-%%%-%%%%%%%-%-%",
"%-------%-------%-%-----%-----%-%---%",
"%%%%%-%%%%%-%%%-%-%-%-%%%-%%%%%-%-%%%",
"%---%-%-%-%---%-%-%-%---%-%---%-%---%",
"%-%%%-%-%-%-%%%-%%%%%-%%%-%-%%%-%%%-%",
"%-------%-----%---%---%-----%-%-%---%",
"%%%-%%%%%%%%%-%%%%%%%-%%%-%%%-%-%-%-%",
"%-------------%-------%-%---%-----%-%",
"%-%-%%%%%-%-%%%-%-%-%%%-%-%%%-%%%-%-%",
"%-%-%-----%-%-%-%-%-----%---%-%-%-%-%",
"%-%-%-%%%%%%%-%-%%%%%%%%%-%%%-%-%%%-%",
"%-%-%-%-----%---%-----%-----%---%---%",
"%%%-%%%-%-%%%%%-%%%%%-%%%-%%%-%%%%%-%",
"%-----%-%-%-----%-%-----%-%---%-%-%-%",
"%-%-%-%-%-%%%-%%%-%%%-%%%-%-%-%-%-%-%",
"%-%-%-%-%-----------------%-%-%-----%",
"%%%-%%%%%%%-%-%-%%%%%-%%%-%-%%%-%%%%%",
"%-------%-%-%-%-----%---%-----%-%---%",
"%%%%%-%-%-%%%%%%%%%-%%%%%%%%%%%-%-%%%",
"%---%-%-----------%-%-----%---%-%---%",
"%-%%%-%%%%%-%%%%%%%%%-%%%%%-%-%-%%%-%",
"%-%---%------%--------%-----%-------%",
"%-%-%-%%%%%-%%%-%-%-%-%-%%%%%%%%%%%%%",
"%-%-%---%-----%-%-%-%-------%---%-%-%",
"%-%-%%%-%%%-%-%-%-%%%%%%%%%-%%%-%-%-%",
"%-%---%-%---%-%-%---%-%---%-%-%-----%",
"%-%%%-%%%-%%%%%-%%%-%-%-%%%%%-%-%%%%%",
"%-------%---%-----%-%-----%---%-%---%",
"%%%-%-%%%%%-%%%%%-%%%-%%%-%-%%%-%-%%%",
"%-%-%-%-%-%-%-%-----%-%---%-%---%-%-%",
"%-%-%%%-%-%-%-%-%%%%%%%%%-%-%-%-%-%-%",
"%---%---%---%-----------------%-----%",
"%-%-%-%-%%%-%%%-%%%%%%%-%%%-%%%-%%%-%",
"%.%-%-%-------%---%-------%---%-%--P%",
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
]


def input():
    global state
    if state < len(inputarray4):
        result = inputarray4[state]
        state += 1
        return result
    else:
        return None

import math

def heuristic_cost_estimate(sy,sx,y,x,ty,tx):
    cost = distance_between(sy, sx, y, x)
    if (ty,tx) == (y,x):
        cost -= 1
    return cost


def distance_between(sy, sx, y, x):
    return abs(sy - y) + abs(sx - x)


def dict_infinity(mj,mi):
    return {(j,i) : math.inf for j in range(mj) for i in range(mi)}



def reconstruct_path(cameFrom, cy,cx):
    total_path = [(cy,cx)]
    total_steps = 0
    while (cy,cx) in cameFrom:
        (cy, cx) = cameFrom[(cy, cx)]
        total_path.append((cy, cx))
        total_steps += 1
    return total_path, total_steps


def neighbors(maze,cy,cx):
    cand_dirs = [(cy - 1, cx), (cy, cx - 1), (cy, cx + 1), (cy + 1, cx)]
    poss_dir = [(j, i) for (j, i) in cand_dirs if 0 < j < len(maze) and 0 < i < len(maze[0]) and maze[j][i] != '%']
    return poss_dir

def walk_astar(maze, ly, lx, sy, sx, y, x):
    closedSet, openSet = set(), set([(sy,sx)])
    cameFrom = {}
    gScore, fScore = dict_infinity(ly,lx), dict_infinity(ly,lx)
    gScore[(sy,sx)] = 0
    fScore[(sy,sx)] = heuristic_cost_estimate(sy,sx,y,x,y,x)
    MAX_LOOPS = 1000
    n_loops = 0
    while len(openSet) > 0 and n_loops < MAX_LOOPS :
        n_loops += 1
        cy, cx = min(openSet, key=lambda x: fScore[x])
        if (cy,cx) == (y,x):
            path, steps = reconstruct_path(cameFrom, cy, cx)

            return path[::-1],steps

        openSet.remove((cy,cx))
        closedSet.add((cy,cx))
        for (ny,nx) in neighbors(maze,cy,cx):
            if (ny,nx) in closedSet:
                continue
            if (ny,nx) not in openSet:
                openSet.add((ny,nx))

            tentative_gscore = gScore[(cy,cx)] + (0 if (cy,cx) == (y,x) else 1)
            if tentative_gscore > gScore[(ny,nx)]:
                continue
            cameFrom[(ny,nx)] = (cy,cx)
            gScore  [(ny,nx)] = tentative_gscore
            fScore  [(ny,nx)] = gScore[(ny,nx)] + heuristic_cost_estimate(ny,nx,y,x,y,x)

    return None

if __name__ == "__main__":

    maze = []
    sy,sx = map(int,input().split())
    y, x = map(int, input().split())
    ly, lx = map(int, input().split())
    for _ in range(ly):
        maze.append(input())

    exploredPath, steps = walk_astar(maze,ly,lx,sy,sx,y,x)
    if exploredPath != None:
        print(steps)
        for p in exploredPath:
            print(*p, sep=" ")
    else:
        print("FAILURE")
